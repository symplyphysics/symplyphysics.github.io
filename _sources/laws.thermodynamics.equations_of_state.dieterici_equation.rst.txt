Dieterici equation
------------------

*Dieterici equation* is another type of semi-empirical equations approximating real gases
along with the more well-known van der Waals equation of state.

**Notation:**

#. :math:`R` (:code:`R`) is :attr:`~symplyphysics.quantities.molar_gas_constant`.

**Notes:**

#. Like the van der Waals equation of state, the Dieterici equation is semi-empirical.
#. It approximates moderate pressures of real gases much better than the van der Waals equation
   within the conditions stated below.
#. Can be converted to the van der Waals equation under an additional limit :math:`a \ll R T V_m`.

**Conditions:**

#. Only applicable in the limits :math:`b \ll V_m` and :math:`a \ll p V_m^2`. Refer to symbols below.
#. Inapplicable for high pressures.

**Links:**

#. `Wikipedia <https://en.wikipedia.org/wiki/Real_gas#Dieterici_model>`__.

.. py:currentmodule:: symplyphysics.laws.thermodynamics.equations_of_state.dieterici_equation

.. py:data:: pressure

    :attr:`~symplyphysics.symbols.classical_mechanics.pressure` inside the system.

    Symbol:
        :code:`p`

    Latex:
        :math:`p`

    Dimension:
        :code:`pressure`

.. py:data:: molar_volume

    :attr:`~symplyphysics.symbols.classical_mechanics.volume` of the system per :attr:`~symplyphysics.symbols.chemistry.amount_of_substance`.

    Symbol:
        :code:`V_m`

    Latex:
        :math:`V_{m}`

    Dimension:
        :code:`volume/amount_of_substance`

.. py:data:: temperature

    :attr:`~symplyphysics.symbols.thermodynamics.temperature` of the system.

    Symbol:
        :code:`T`

    Latex:
        :math:`T`

    Dimension:
        :code:`temperature`

.. py:data:: attractive_forces_parameter

    :attr:`~symplyphysics.symbols.thermodynamics.attractive_forces_parameter`.

    Symbol:
        :code:`a`

    Latex:
        :math:`a`

    Dimension:
        :code:`pressure*volume**2/amount_of_substance**2`

.. py:data:: excluded_volume_parameter

    :attr:`~symplyphysics.symbols.thermodynamics.excluded_volume_parameter`.

    Symbol:
        :code:`b`

    Latex:
        :math:`b`

    Dimension:
        :code:`volume/amount_of_substance`

.. py:data:: law

    :code:`p * (V_m - b) = R * T * exp(-a / (R * T * V_m))`


    Latex:
        .. math::
            p \left(V_{m} - b\right) = R T \exp{\left(- \frac{a}{R T V_{m}} \right)}


