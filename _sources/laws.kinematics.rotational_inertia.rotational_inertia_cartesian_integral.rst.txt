Rotational inertia in terms of Cartesian integral
=================================================

In case of a rigid body with a continuously distributed mass, its rotational inertia is expressed
as a volume integral over the entire body, i.e. a triple integral over :math:`x, y, z` in Cartesian
coordinates.

**Notes:**

#. The integration is carried out over the entire body as to include every volume element.

**Links:**

#. `Wikipedia, derivable from fourth equation <https://en.wikipedia.org/wiki/Moment_of_inertia#Point_mass>`__.

.. py:currentmodule:: symplyphysics.laws.kinematics.rotational_inertia.rotational_inertia_cartesian_integral

.. py:data:: rotational_inertia

    :attr:`~symplyphysics.symbols.classical_mechanics.rotational_inertia`.

Symbol:
    :code:`I`

Latex:
    :math:`I`

Dimension:
    :code:`length**2*mass`


.. py:data:: x

    :attr:`~symplyphysics.symbols.classical_mechanics.position` on the :math:`x` axis.

Symbol:
    :code:`x`

Latex:
    :math:`x`

Dimension:
    :code:`length`


.. py:data:: x_start

    Initial position on the :math:`x` axis.

Symbol:
    :code:`x_0`

Latex:
    :math:`x_{0}`

Dimension:
    :code:`length`


.. py:data:: x_end

    Final position on the :math:`x` axis.

Symbol:
    :code:`x_1`

Latex:
    :math:`x_{1}`

Dimension:
    :code:`length`


.. py:data:: y

    :attr:`~symplyphysics.symbols.classical_mechanics.position` on the :math:`y` axis.

Symbol:
    :code:`y`

Latex:
    :math:`y`

Dimension:
    :code:`length`


.. py:data:: y_start

    Initial position on the :math:`y` axis.

Symbol:
    :code:`y_0`

Latex:
    :math:`y_{0}`

Dimension:
    :code:`length`


.. py:data:: y_end

    Final position on the :math:`y` axis.

Symbol:
    :code:`y_1`

Latex:
    :math:`y_{1}`

Dimension:
    :code:`length`


.. py:data:: z

    :attr:`~symplyphysics.symbols.classical_mechanics.position` on the :math:`z` axis.

Symbol:
    :code:`z`

Latex:
    :math:`z`

Dimension:
    :code:`length`


.. py:data:: z_start

    Initial position on the :math:`z` axis.

Symbol:
    :code:`z_0`

Latex:
    :math:`z_{0}`

Dimension:
    :code:`length`


.. py:data:: z_end

    Final position on the :math:`z` axis.

Symbol:
    :code:`z_1`

Latex:
    :math:`z_{1}`

Dimension:
    :code:`length`


.. py:data:: density

    Mass-specific :attr:`~symplyphysics.symbols.basic.density` as a function of :attr:`~x`, :attr:`~y`, :attr:`~z`.

Symbol:
    :code:`rho(x, y, z)`

Latex:
    :math:`\rho{\left(x,y,z \right)}`

Dimension:
    :code:`mass/volume`


.. py:data:: distance_to_axis

    :attr:`~symplyphysics.symbols.classical_mechanics.distance_to_axis` as a function of :attr:`~x`, :attr:`~y`, :attr:`~z`.

Symbol:
    :code:`r(x, y, z)`

Latex:
    :math:`r{\left(x,y,z \right)}`

Dimension:
    :code:`length`


.. py:data:: law

    :code:`I = Integral(rho(x, y, z) * r(x, y, z)^2, (x, x_0, x_1), (y, y_0, y_1), (z, z_0, z_1))`


    Latex:
        .. math::
            I = \int\limits_{z_{0}}^{z_{1}}\int\limits_{y_{0}}^{y_{1}}\int\limits_{x_{0}}^{x_{1}} \rho{\left(x,y,z \right)} r^{2}{\left(x,y,z \right)}\, dx\, dy\, dz


