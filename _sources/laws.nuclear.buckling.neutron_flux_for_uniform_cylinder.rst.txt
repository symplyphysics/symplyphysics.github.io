Neutron flux for uniform cylinder
=================================

Neutron flux for the uniform cylindrical reactor of radius :math:`r_0` and height
:math:`h_0` depends on the radial distance :math:`r` and axial coordinate :math:`z`. A
cylindrical coordinate system is assumed, such that the cylinder's axis of rotation is
the :math:`z`-axis.

**Links:**

#. `NuclearPower, see end of page <https://www.nuclear-power.com/nuclear-power/reactor-physics/neutron-diffusion-theory/finite-cylindrical-reactor/>`__.

.. py:currentmodule:: symplyphysics.laws.nuclear.buckling.neutron_flux_for_uniform_cylinder

.. py:data:: dimension_factor

    Dimension factor that appears as a coefficient in the solution to the :ref:`differential
    equation <Diffusion equation from neutron flux>`. See :attr:`~symplyphysics.symbols.nuclear.neutron_flux`.

Symbol:
    :code:`Phi_0`

Latex:
    :math:`\Phi_{0}`

Dimension:
    :code:`1/(area*time)`


.. py:data:: radial_distance

    :attr:`~symplyphysics.symbols.classical_mechanics.distance_to_axis` within the cylindrical coordinate system of the cylinder.

Symbol:
    :code:`r`

Latex:
    :math:`r`

Dimension:
    :code:`length`


.. py:data:: axial_coordinate

    :attr:`~symplyphysics.symbols.classical_mechanics.height` within the cylindrical coordinate system of the cylinder.

Symbol:
    :code:`h`

Latex:
    :math:`h`

Dimension:
    :code:`length`


.. py:data:: radius

    :attr:`~symplyphysics.symbols.classical_mechanics.radius` of the cylinder.

Symbol:
    :code:`r_0`

Latex:
    :math:`r_{0}`

Dimension:
    :code:`length`


.. py:data:: height

    :attr:`~symplyphysics.symbols.classical_mechanics.height` of the cylinder.

Symbol:
    :code:`h_0`

Latex:
    :math:`h_{0}`

Dimension:
    :code:`length`


.. py:data:: neutron_flux

    :attr:`~symplyphysics.symbols.nuclear.neutron_flux` at a point with coordinates :attr:`~radial_distance` and
    :attr:`~axial_coordinate`.

Symbol:
    :code:`Phi`

Latex:
    :math:`\Phi`

Dimension:
    :code:`1/(area*time)`


.. py:data:: law

    :code:`Phi = Phi_0 * besselj(0, 2.405 / r_0 * r) * cos(pi / h_0 * h)`


    Latex:
        .. math::
            \Phi = \Phi_{0} J_{0}\left(\frac{2.405}{r_{0}} r\right) \cos{\left(\frac{\pi}{h_{0}} h \right)}


