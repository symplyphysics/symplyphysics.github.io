General heat equation in 3D
===========================

Heat equation governs heat diffusion, as well as other diffusive processes. It describes the
evolution of heat transferred from hotter to colder environments in time and space.

**Conditions:**

#. The medium is isotropic.

#. There is no mass transfer or radiation in the system.

**Links:**

#. `Wikipedia â€” Heat equation <https://en.wikipedia.org/wiki/Heat_equation#Non-uniform_isotropic_medium>`__.

.. py:currentmodule:: symplyphysics.laws.thermodynamics.heat_transfer.general_equation_in_3d

.. py:data:: medium_density

    :attr:`~symplyphysics.symbols.basic.density` of the medium.

Symbol:
    :code:`rho`

Latex:
    :math:`\rho`

Dimension:
    :code:`mass/volume`


.. py:data:: medium_specific_isobaric_heat_capacity

    :attr:`~symplyphysics.symbols.basic.mass`-specific isobaric :attr:`~symplyphysics.symbols.thermodynamics.heat_capacity` of the medium.

Symbol:
    :code:`c_p`

Latex:
    :math:`c_{p}`

Dimension:
    :code:`energy/(mass*temperature)`


.. py:data:: position_vector

    Position vector. See :attr:`~symplyphysics.symbols.classical_mechanics.distance_to_origin`.

Symbol:
    :code:`r`

Latex:
    :math:`{\vec r}`

Dimension:
    :code:`length`


.. py:data:: time

    :attr:`~symplyphysics.symbols.basic.time`.

Symbol:
    :code:`t`

Latex:
    :math:`t`

Dimension:
    :code:`time`


.. py:data:: temperature

    :attr:`~symplyphysics.symbols.thermodynamics.temperature` as a function of :attr:`~position_vector` and :attr:`~time`.

Symbol:
    :code:`T(r, t)`

Latex:
    :math:`T{\left({\vec r},t \right)}`

Dimension:
    :code:`temperature`


.. py:data:: thermal_conductivity

    :attr:`~symplyphysics.symbols.thermodynamics.thermal_conductivity` as a function of :attr:`~position_vector`.

Symbol:
    :code:`k(r)`

Latex:
    :math:`k{\left({\vec r} \right)}`

Dimension:
    :code:`power/(length*temperature)`


.. py:data:: heat_source_density

    Volumetric density of heat sources (i.e. :attr:`~symplyphysics.symbols.basic.power` produced per unit :attr:`~symplyphysics.symbols.classical_mechanics.volume`) as
    a function of :attr:`~position_vector`.

Symbol:
    :code:`q(r)`

Latex:
    :math:`q{\left({\vec r} \right)}`

Dimension:
    :code:`power/volume`


.. py:data:: law

    :code:`rho * c_p * Derivative(T(r, t), t) = div(k(r) * grad(T(r, t))) + q(r)`


    Latex:
        .. math::
            \rho c_{p} \frac{\partial}{\partial t} T{\left({\vec r},t \right)} = \text{div} \, k{\left({\vec r} \right)} \text{grad} \, T{\left({\vec r},t \right)} + q{\left({\vec r} \right)}


