Solution with zero temperature boundaries
-----------------------------------------

The heat equation coupled with a boundary condition can be solved to get a unique solution.
In this boundary-value problem the heat transfer within a thin rod is observed, the temperature
on both ends being zero. This restricts the number of functions :math:`f(x)` that can satisfy
the boundary equation :math:`f(x) = T(x, 0)`.

**Notes:**

#. :math:`f(x)` represents initial spatial distribution of temperature.

    .. _heat_transfer_zero_temperature_solution_coefficient_note:

#. Values :math:`B_n` are found using the boundary condition :math:`f(x) = \sum_n T_n(x, 0)`
   with the help of the Fourier method.
#. The total solution :math:`T(x, t) = \sum_n T_n(x, t)`.

**Conditions:**

#. Position :math:`x \in [0, L]`.
#. Temperature on both ends is zero: :math:`T_n(0, t) = 0`, :math:`T_n(L, t) = 0`

**Links:**

#. `Paul's Online Math Notes, Example 1 <https://tutorial.math.lamar.edu/classes/de/solvingheatequation.aspx>`__.

.. py:currentmodule:: symplyphysics.laws.thermodynamics.heat_transfer.solution_with_zero_temperature_boundaries

.. py:data:: temperature

    Solution to the heat equation corresponding to the :math:`n`:sup:`th` mode.
    See :attr:`~symplyphysics.symbols.thermodynamics.temperature`.

    Symbol:
        :code:`T_n(x, t)`

    Latex:
        :math:`T_{n}`

    Dimension:
        :code:`temperature`

.. py:data:: scaling_coefficient

    Scaling coefficient of the solution, see :ref:`Notes <heat_transfer_zero_temperature_solution_coefficient_note>`.

    Symbol:
        :code:`B_n`

    Latex:
        :math:`B_{n}`

    Dimension:
        :code:`temperature`

.. py:data:: thermal_diffusivity

    :attr:`~symplyphysics.symbols.thermodynamics.thermal_diffusivity`.

    Symbol:
        :code:`alpha`

    Latex:
        :math:`\alpha`

    Dimension:
        :code:`area/time`

.. py:data:: mode_number

    Number of the mode. See :attr:`~symplyphysics.symbols.basic.positive_number`.

    Symbol:
        :code:`N`

    Latex:
        :math:`N`

    Dimension:
        :code:`dimensionless`

.. py:data:: maximum_position

    Maximum possible :attr:`~symplyphysics.symbols.classical_mechanics.position`.

    Symbol:
        :code:`x_max`

    Latex:
        :math:`x_\text{max}`

    Dimension:
        :code:`length`

.. py:data:: position

    :attr:`~symplyphysics.symbols.classical_mechanics.position`, or spatial variable.

    Symbol:
        :code:`x`

    Latex:
        :math:`x`

    Dimension:
        :code:`length`

.. py:data:: time

    :attr:`~symplyphysics.symbols.basic.time`.

    Symbol:
        :code:`t`

    Latex:
        :math:`t`

    Dimension:
        :code:`time`

.. py:data:: law

    :code:`T_n(x, t) = B_n * sin(N * pi * x / x_max) * exp(-alpha * (N * pi / x_max)^2 * t)`


    Latex:
        .. math::
            T_{n} = B_{n} \sin{\left(\frac{N \pi x}{x_\text{max}} \right)} \exp{\left(- \alpha \left(\frac{N \pi}{x_\text{max}}\right)^{2} t \right)}


