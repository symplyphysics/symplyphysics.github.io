Butterworth filter order from distortion and frequency
======================================================

The approximation of the power transmission coefficient of a normalized low-pass filter is given by approximating functions of the order of :math:`n`. The **Butterworth filter** is described by the function :math:`f^n` of frequency :math:`f`.

..
    TODO: find link

.. py:currentmodule:: symplyphysics.laws.electricity.circuits.filters.butterworth_filter_order_from_distortion_and_frequencies

.. py:data:: filter_order

    Butterworth filter order. See :attr:`~symplyphysics.symbols.basic.positive_number`.

Symbol:
    :code:`N`

Latex:
    :math:`N`

Dimension:
    :code:`dimensionless`


.. py:data:: bandwidth_distortion

    Bandwidth distortion, which corresponds to the number of ripples in the bandwidth.

Symbol:
    :code:`e`

Latex:
    :math:`e`

Dimension:
    :code:`dimensionless`


.. py:data:: band_stop_distortion

    Band-stop distortion, which sets the required suppression level in the filter band-stop.

Symbol:
    :code:`e_1`

Latex:
    :math:`e_{1}`

Dimension:
    :code:`dimensionless`


.. py:data:: cutoff_frequency

    Cut-off frequency, i.e. :attr:`~symplyphysics.symbols.classical_mechanics.temporal_frequency` that corresponds to the maximum
    bandwidth distortion.

Symbol:
    :code:`f_0`

Latex:
    :math:`f_{0}`

Dimension:
    :code:`frequency`


.. py:data:: band_stop_frequency

    Band-stop frequency, i.e. :attr:`~symplyphysics.symbols.classical_mechanics.temporal_frequency` that corresponds to the maximum
    band-stop distortion.

Symbol:
    :code:`f_1`

Latex:
    :math:`f_{1}`

Dimension:
    :code:`frequency`


.. py:data:: law

    :code:`N = log(e_1 / e) / log(f_1 / f_0)`


    Latex:
        .. math::
            N = \frac{\log \left( \frac{e_{1}}{e} \right)}{\log \left( \frac{f_{1}}{f_{0}} \right)}


