Displacement in resonant oscillations
-------------------------------------

When an oscillating external force is driving the oscillations of an oscillator,
amplitude of oscillations is greatest when the angular frequency of the driving
is equal to the natural frequency of the oscillator. This condition is called
resonance.

**Conditions:**

#. Angular frequency of the driving force is equal to the natural frequency of the oscillator.
#. No damping is present in the system.

**Notes:**

#. The expression of the driving force has the form :math:`F \cos{\left( \omega t + \varphi \right)}`
   where :math:`\omega` is the angular frequency of its oscillations.

.. py:currentmodule:: symplyphysics.laws.dynamics.resonant_oscillations

.. py:data:: resonant_displacement

    The displacement of resonant oscillations as a function of :attr:`~time`. See :attr:`~symplyphysics.symbols.classical_mechanics.position`.

    Symbol:
        :code:`x(t)`

    Latex:
        :math:`x`

    Dimension:
        :code:`length`

.. py:data:: mass

    The :attr:`~symplyphysics.symbols.basic.mass` of the oscillator.

    Symbol:
        :code:`m`

    Latex:
        :math:`m`

    Dimension:
        :code:`mass`

.. py:data:: natural_angular_frequency

    The natural :attr:`~symplyphysics.symbols.classical_mechanics.angular_frequency` of the oscillator.

    Symbol:
        :code:`w_0`

    Latex:
        :math:`\omega_0`

    Dimension:
        :code:`angle/time`

.. py:data:: driving_force_amplitude

    The amplitude of the driving :attr:`~symplyphysics.symbols.classical_mechanics.force`.

    Symbol:
        :code:`F`

    Latex:
        :math:`F`

    Dimension:
        :code:`force`

.. py:data:: driving_phase_lag

    The :attr:`~symplyphysics.symbols.classical_mechanics.phase_shift` of the oscillations of the driving force.

    Symbol:
        :code:`phi`

    Latex:
        :math:`\varphi`

    Dimension:
        :code:`angle`

.. py:data:: time

    :attr:`~symplyphysics.symbols.basic.time`.

    Symbol:
        :code:`t`

    Latex:
        :math:`t`

    Dimension:
        :code:`time`

.. py:data:: law

    :code:`x(t) = t * F * sin(t * w_0 + phi) / (2 * w_0 * m)`


    Latex:
        .. math::
            x{\left(t \right)} = \frac{t F \sin{\left(t \omega_{0} + \varphi \right)}}{2 \omega_{0} m}


