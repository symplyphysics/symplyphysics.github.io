Rotational inertia in terms of a cylindrical integral
=====================================================

In case of a rigid body with a continuously distributed mass, its rotational inertia is expressed
as a volume integral over the entire body, i.e. a triple integral over space coordinates.

**Notes:**

#. The integration is carried out over the entire body as to include every volume element.

**Conditions:**

#. The :math:`z`-axis is the rotational axis of the body.

**Links:**

#. `Wikipedia, derivable from fourth equation <https://en.wikipedia.org/wiki/Moment_of_inertia#Point_mass>`__.

.. py:currentmodule:: symplyphysics.laws.kinematics.rotational_inertia.rotational_inertia_cylindrical_integral

.. py:data:: rotational_inertia

    :attr:`~symplyphysics.symbols.classical_mechanics.rotational_inertia` of the body.

Symbol:
    :code:`I`

Latex:
    :math:`I`

Dimension:
    :code:`length**2*mass`


.. py:data:: radius

    :attr:`~symplyphysics.symbols.classical_mechanics.radius`, or distance to the rotational axis.

Symbol:
    :code:`r`

Latex:
    :math:`r`

Dimension:
    :code:`length`


.. py:data:: radius_start

    Initial :attr:`~symplyphysics.symbols.classical_mechanics.radius`.

Symbol:
    :code:`r_0`

Latex:
    :math:`r_{0}`

Dimension:
    :code:`length`


.. py:data:: radius_end

    Final :attr:`~symplyphysics.symbols.classical_mechanics.radius`.

Symbol:
    :code:`r_1`

Latex:
    :math:`r_{1}`

Dimension:
    :code:`length`


.. py:data:: polar_angle

    Polar :attr:`~symplyphysics.symbols.basic.angle`.

Symbol:
    :code:`phi`

Latex:
    :math:`\varphi`

Dimension:
    :code:`angle`


.. py:data:: polar_angle_start

    Initial polar :attr:`~symplyphysics.symbols.basic.angle`.

Symbol:
    :code:`phi_0`

Latex:
    :math:`\varphi_{0}`

Dimension:
    :code:`angle`


.. py:data:: polar_angle_end

    Final polar :attr:`~symplyphysics.symbols.basic.angle`.

Symbol:
    :code:`phi_1`

Latex:
    :math:`\varphi_{1}`

Dimension:
    :code:`angle`


.. py:data:: height

    :attr:`~symplyphysics.symbols.classical_mechanics.height`.

Symbol:
    :code:`h`

Latex:
    :math:`h`

Dimension:
    :code:`length`


.. py:data:: height_start

    Initial :attr:`~symplyphysics.symbols.classical_mechanics.height`.

Symbol:
    :code:`h_0`

Latex:
    :math:`h_{0}`

Dimension:
    :code:`length`


.. py:data:: height_end

    Final :attr:`~symplyphysics.symbols.classical_mechanics.height`.

Symbol:
    :code:`h_1`

Latex:
    :math:`h_{1}`

Dimension:
    :code:`length`


.. py:data:: density

    :attr:`~symplyphysics.symbols.basic.density` as a function of :attr:`~radius`, :attr:`~polar_angle`, and :attr:`~height`.

Symbol:
    :code:`rho(r, phi, h)`

Latex:
    :math:`\rho{\left(r,\varphi,h \right)}`

Dimension:
    :code:`mass/volume`


.. py:data:: law

    :code:`I = Integral(rho(r, phi, h) * r^3, (r, r_0, r_1), (phi, phi_0, phi_1), (h, h_0, h_1))`


    Latex:
        .. math::
            I = \int\limits_{h_{0}}^{h_{1}}\int\limits_{\varphi_{0}}^{\varphi_{1}}\int\limits_{r_{0}}^{r_{1}} \rho{\left(r,\varphi,h \right)} r^{3}\, dr\, d\varphi\, dh


